version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: srag_postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-srag_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-srag_password}
      POSTGRES_DB: ${POSTGRES_DB:-srag_monitoring}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - srag_network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-srag_user}']
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: srag_backend
    restart: always
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-srag_user}:${POSTGRES_PASSWORD:-srag_password}@postgres:5432/${POSTGRES_DB:-srag_monitoring}?schema=public
      PORT: 3001
      NODE_ENV: production
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    ports:
      - '3001:3001'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - srag_network
    command: >
      sh -c "
        npx prisma migrate deploy &&
        npm run seed &&
        node dist/main
      "

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: srag_frontend
    restart: always
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001}
    ports:
      - '3000:3000'
    depends_on:
      - backend
    networks:
      - srag_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: srag_nginx
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - srag_network

volumes:
  postgres_data:

networks:
  srag_network:
    driver: bridge
